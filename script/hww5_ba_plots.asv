%%  ba plots

ba_mask_func = @(l, m) pipe(m ...
  , find_task(l, 'ba') ...
  , @(m) find(l, 'correct-true', m) ...
  , @(m) subj_func(l, m) ...
  , @(m) drug_func(l, m) ...
  , @(m) pup_outlier_func(l, m) ...
);

im_cond = 'image-condition';
im_cat = 'image-category';
im_dir_cat = 'image-directness';
first_look_cat = 'first-look-image-category';

ba_ind = find( outs.labels, 'ba' );
ba_labels = prune( outs.labels(ba_ind) );
renamecat( ba_labels, im_cat, im_cond );
addcat( ba_labels, im_cat );

first_look_labs = hww5.make_first_look_labels( ...
  outs.image_onset_fix_events(ba_ind, :), ba_labels );
addsetcat( ba_labels, first_look_cat, first_look_labs );

[lookdur, ind, im_cats] = hww5.collapse_left_right( outs.lookdur(ba_ind, :), ba_labels );
nfix = hww5.collapse_left_right( outs.num_fix(ba_ind, :), ba_labels );
fixdur = hww5.collapse_left_right( outs.fixdur(ba_ind, :), ba_labels );

lookdur_labels = prune( ba_labels(ind) );
setcat( lookdur_labels, im_cat, im_cats );

[im_onset_rt, im_onset_rt_labels, im_onset_kept_ind] = make_image_onset_rt( ...
  outs.image_onset_rt(ba_ind, :), ba_labels' );

%%  lookdur / nfix

do_norm = is_norm && is_drug;
do_save = true;
% meas_type = 'lookdur';
% meas_type = 'fixdur';
meas_types = {'nfix', 'lookdur', 'fixdur'};
overlay_points = false;
per_image_conditions = true;
per_directions = trufls;
per_subjects = false;

plt_combs = dsp3.numel_combvec( ...
    meas_types ...
  , per_image_conditions ...
  , per_directions ...
  , per_subjects ...
);

for idx = 1:size(plt_combs, 2)
  
shared_utils.general.progress( idx, size(plt_combs, 2) );
  
c = plt_combs(:, idx);
meas_type = meas_types{c(1)};
per_image_condition = per_image_conditions(c(2));
per_direction = per_directions(c(3));
per_subject = per_subjects(c(4));

xcats = {im_cat};

if ( is_drug )
  gcats = { 'drug' };
  pcats = { 'task-id', 'subject-type' };
else
  gcats = {};
  pcats = { 'task-id', 'drug', 'subject-type' };
end
fcats = {};
if ( per_image_condition )
  fcats{end+1} = im_cond;
end
if ( per_subject )
  fcats{end+1} = 'subject';
end

each = { 'run-id', im_cat };
norm_each = { 'subject', im_cat };

if ( per_direction )
  each{end+1} = im_dir_cat;
  norm_each{end+1} = im_dir_cat;
  pcats{end+1} = im_dir_cat;
end

if ( per_image_condition )
  each{end+1} = im_cond;
  norm_each{end+1} = im_cond;
end

if ( norm_each_task_order )
  norm_each{end+1} = 'task-order';
end
norm_cats = {'drug'};
norm_labs = {'saline'};
anova_each = {'subject-type', im_cat};
anova_factors = {};

if ( per_direction )
  anova_factors{end+1} = im_dir_cat;
end

if ( per_image_condition )
  if ( is_omnibus )
    anova_factors{end+1} = im_cond;
  else
    anova_each{end+1} = im_cond;
  end
end
if ( is_drug )
  anova_factors{end+1} = 'drug';
end
if ( task_order_factor )
  anova_factors{end+1} = 'task-order';
end

switch ( meas_type )
  case 'lookdur'
    pltdat = lookdur;
    y_label = 'lookdur (ms)';
    plot_subdir = 'basic_behavior/ba_lookdur';
  case 'fixdur'
    pltdat = fixdur;
    y_label = 'fixdur (ms)';
    plot_subdir = 'basic_behavior/ba_fixdur';
  case 'nfix'
    pltdat = nfix;
    y_label = '# fixations';
    plot_subdir = 'basic_behavior/ba_nfix';
  otherwise
    error( 'Unrecognized measure type "%s".', meas_type );
end

if ( per_image_condition )
  plot_subdir = [ plot_subdir, '-per-image-cond' ];
end
if ( per_subject )
  plot_subdir = [ plot_subdir, '-per-subject' ];
end

[mean_dur, mean_labs] = hww5.maybe_normalize_and_collapse( pltdat, lookdur_labels' ...
  , 'mask_func', ba_mask_func ...
  , 'collapse', true ...
  , 'collapse_op', @(x) nanmedian(x, 1) ...
  , 'collapse_each', each ...
  , 'norm', do_norm ...
  , 'norm_each', norm_each ...
  , 'norm_cats', norm_cats ...
  , 'norm_labs', norm_labs ...
);

if ( numel(combs(mean_labs, 'drug')) == 1 )
  anova_factors = setdiff( anova_factors, {'drug'} );
end

anova_outs = dsp3.anovan2( mean_dur, mean_labs', anova_each, anova_factors );
if ( do_save )
  save_p = hww5.plot_directory( conf, fullfile(plot_subdir, 'stats') );
  dsp3.save_anova_outputs( anova_outs, save_p, [anova_factors, anova_each] );
end

hww5.plot_significant_anova_effects( mean_dur, mean_labs', anova_outs, plot_subdir ...
  , 'do_save', do_save ...
  , 'addtl_pcats', anova_each ...
  , 'points_are', ternary(overlay_points, {'subject'}, {}) ...
);

hww5.plot.ba_lookdur( mean_dur, mean_labs' ...
  , 'mean', false ...
  , 'norm', false ...
  , 'xcats', xcats ...
  , 'gcats', gcats ...
  , 'pcats', pcats ...
  , 'fcats', fcats ...
  , 'do_save', do_save ...
  , 'y_label', y_label ...
  , 'plot_subdir', plot_subdir ...
  , 'points_are', ternary(overlay_points, {'subject'}, {}) ...
  , 'per_panel_labels', true ...
  , 'config', conf ...
);

end

%%  time to first look

do_norm = is_norm && is_drug;
do_save = true;
overlay_points = false;
per_image_conditions = true;
per_subjects = false;
per_directions = trufls;

plt_combs = dsp3.numel_combvec( ...
    per_subjects ...
  , per_directions ...
  , per_image_conditions ...
);

for idx = 1:size(plt_combs, 2)
  
shared_utils.general.progress( idx, size(plt_combs, 2) );
  
c = plt_combs(:, idx);
per_subject = per_subjects(c(1));
per_direction = per_directions(c(2));
per_image_condition = per_image_conditions(c(3));

xcats = {};

if ( is_drug )
  gcats = { 'drug' };
  pcats = { 'task-id', im_cat, 'subject-type' };
else
  gcats = { im_cat };
  pcats = { 'task-id', 'drug', 'subject-type' };
end

if ( per_direction )
  pcats{end+1} = im_dir_cat;
end

fcats = {};
if ( per_image_condition )
  fcats{end+1} = im_cond;
end
if ( per_subject )
  fcats{end+1} = 'subject';
end

each = { 'run-id', im_cat };
norm_each = { 'subject', im_cat };
if ( per_image_condition )
  each{end+1} = im_cond;
  norm_each{end+1} = im_cond;
end
if ( per_direction )
  each{end+1} = im_dir_cat;
  norm_each{end+1} = im_dir_cat;
end
if ( norm_each_task_order )
  norm_each{end+1} = 'task-order';
end
norm_cats = {'drug'};
norm_labs = {'saline'};
anova_each = {'subject-type'};
anova_factors = {};

if ( is_drug )
  if ( is_omnibus )
    anova_factors{end+1} = im_cat;
  else
    anova_each{end+1} = im_cat;
  end
else
  anova_factors = {im_cat};
end

if ( per_direction )
  anova_factors{end+1} = im_dir_cat;
end
if ( per_image_condition )
  if ( is_omnibus )
  else
    anova_each{end+1} = im_cond;
  end
end
if ( is_drug )
  anova_factors{end+1} = 'drug';
end
if ( task_order_factor )
  anova_factors{end+1} = 'task-order';
end

pltdat = lookdur;
y_label = 'time to first look (ms)';
plot_subdir = 'basic_behavior/ba_rt';

if ( per_subject )
  plot_subdir = [ plot_subdir, '-per-subject' ];
end
if ( per_image_condition )
  plot_subdir = [ plot_subdir, '-per-image-cond' ];
end

[mean_dur, mean_labs] = hww5.maybe_normalize_and_collapse( im_onset_rt, im_onset_rt_labels' ...
  , 'mask_func', ba_mask_func ...
  , 'collapse', true ...
  , 'collapse_op', @(x) nanmedian(x, 1) ...
  , 'collapse_each', each ...
  , 'norm', do_norm ...
  , 'norm_each', norm_each ...
  , 'norm_cats', norm_cats ...
  , 'norm_labs', norm_labs ...
);

if ( numel(combs(mean_labs, 'drug')) == 1 )
  anova_factors = setdiff( anova_factors, {'drug'} );
end

anova_outs = dsp3.anovan2( mean_dur, mean_labs', anova_each, anova_factors );
if ( do_save )
  save_p = hww5.plot_directory( conf, fullfile(plot_subdir, 'stats') );
  dsp3.save_anova_outputs( anova_outs, save_p, [anova_factors, anova_each] );
end

hww5.plot_significant_anova_effects( mean_dur, mean_labs', anova_outs, plot_subdir ...
  , 'do_save', do_save ...
  , 'addtl_pcats', anova_each ...
  , 'points_are', ternary(overlay_points, {'subject'}, {}) ...
);

hww5.plot.ba_lookdur( mean_dur, mean_labs' ...
  , 'mean', false ...
  , 'norm', false ...
  , 'xcats', xcats ...
  , 'gcats', gcats ...
  , 'pcats', pcats ...
  , 'fcats', fcats ...
  , 'do_save', do_save ...
  , 'y_label', y_label ...
  , 'plot_subdir', plot_subdir ...
  , 'points_are', ternary(overlay_points, {'subject'}, {}) ...
  , 'per_panel_labels', true ...
  , 'config', conf ...
);

end

%%  first look proportions

do_save = true;
do_norm = is_norm && is_drug;
overlay_points = false;
per_image_condition = true;
per_directions = false;
per_subjects = false;

plt_combs = dsp3.numel_combvec( ...
    per_directions ...
  , per_subjects ...
);

for idx = 1:size(plt_combs, 2)
  
shared_utils.general.progress( idx, size(plt_combs, 2) );
  
c = plt_combs(:, idx);
per_direction = per_directions(c(1));
per_subject = per_subjects(c(2));

xcats = {};
if ( is_drug )
  gcats = { 'drug' };
  pcats = { 'task-id', im_cat, first_look_cat, 'subject-type' };
else
  gcats = { im_cat, first_look_cat };
  pcats = { 'task-id', 'subject-type' };
end
fcats = {};
if ( per_image_condition )
  fcats{end+1} = im_cond;
end
if ( per_direction )
  pcats{end+1} = im_dir_cat;
end
if ( per_subject )
  fcats{end+1} = 'subject';
end

each = {'run-id'};
norm_each = { 'subject', im_cat, first_look_cat};

if ( per_direction )
  norm_each{end+1} = im_dir_cat;
  each{end+1} = im_dir_cat;
end
if ( per_image_condition )
  each{end+1} = im_cond;
  norm_each{end+1} = im_cond;
end
if ( norm_each_task_order )
  norm_each{end+1} = 'task-order';
end
norm_cats = {'drug'};
norm_labs = {'saline'};
anova_each = {'subject-type'};
anova_factors = {};

if ( is_drug )
  anova_each{end+1} = first_look_cat;
else
  anova_factors{end+1} = first_look_cat;
end

if ( per_direction )
  anova_factors{end+1} = im_dir_cat;
end

if ( per_image_condition )
  anova_each{end+1} = im_cond;
end

if ( is_drug )
  anova_factors{end+1} = 'drug';
end
if ( task_order_factor )
  anova_factors{end+1} = 'task-order';
end

plot_subdir = 'basic_behavior/ba_first_look';

if ( per_subject )
  plot_subdir = [ plot_subdir, '-per-subject' ];
end

ba_mask = ba_mask_func( ba_labels, rowmask(ba_labels) );
[props, prop_labels] = proportions_of( ...
  ba_labels, each, {first_look_cat}, ba_mask );
keep_ind = remove_impossible_image_category_combinations( prop_labels );
props = props(keep_ind);
prop_labels = prune( prop_labels(keep_ind) );

if ( do_norm )
  ylims = [];
else
  ylims = [0, 1];
end

[props, prop_labels] = hww5.maybe_normalize_and_collapse( props, prop_labels' ...
  , 'collapse', false ...
  , 'norm', do_norm ...
  , 'norm_each', norm_each ...
  , 'norm_cats', norm_cats ...
  , 'norm_labs', norm_labs ...
  , 'exclude_non_finite', true ...
);

if ( numel(combs(prop_labels, 'drug')) == 1 )
  anova_factors = setdiff( anova_factors, {'drug'} );
end

anova_outs = dsp3.anovan2( props, prop_labels', anova_each, anova_factors );
if ( do_save )
  save_p = hww5.plot_directory( conf, fullfile(plot_subdir, 'stats') );
  dsp3.save_anova_outputs( anova_outs, save_p, [anova_factors, anova_each] );
end

hww5.plot_significant_anova_effects( props, prop_labels', anova_outs, plot_subdir ...
  , 'do_save', do_save ...
  , 'addtl_pcats', anova_each ...
  , 'per_panel_labels', false ...
  , 'points_are', ternary(overlay_points, {'subject'}, {}) ...
);

hww5.plot.ba_lookdur( props, prop_labels ...
  , 'mean', false ...
  , 'norm', false ...
  , 'xcats', xcats ...
  , 'gcats', gcats ...
  , 'pcats', pcats ...
  , 'fcats', fcats ...
  , 'points_are', ternary(overlay_points, {'subject'}, {}) ...
  , 'do_save', do_save ...
  , 'y_label', 'Proportion' ...
  , 'y_lims', ylims ...
  , 'plot_subdir', plot_subdir ...
  , 'per_panel_labels', false ...
  , 'config', conf ...
);

end

%%  pupil

each = {'run-id'};
norm_each = {'subject', 'task-id'};
if ( norm_each_task_order )
  norm_each{end+1} = 'task-order';
end
norm_cats = {'drug'};
norm_labs = {'saline'};
anova_each = {'task-id'};
anova_factors = {};
if ( is_drug )
  anova_factors{end+1} = 'drug';
end
if ( task_order_factor )
  anova_factors{end+1} = 'task-order';
end

do_save = true;

[pupil_dat, pupil_labs] = hww5.maybe_normalize_and_collapse( outs.pupil_size, outs.labels' ...
  , 'mask_func', ba_mask_func ...
  , 'norm', do_norm ...
  , 'norm_each', norm_each ...
  , 'norm_cats', norm_cats ...
  , 'norm_labs', norm_labs ...
  , 'collapse_each', each ...
);

plot_subdir = 'basic_behavior/ba_pupil';

anova_outs = dsp3.anovan2( pupil_dat, pupil_labs', anova_each, anova_factors );
if ( do_save )
  save_p = hww5.plot_directory( conf, fullfile(plot_subdir, 'stats') );
  dsp3.save_anova_outputs( anova_outs, save_p, [anova_factors, anova_each] );
end

xcats = {'task-id'};
gcats = {'drug'};
pcats = {};
fcats = {'subject-type'};

hww5.plot.ba_lookdur( pupil_dat, pupil_labs' ...
  , 'mean', false ...
  , 'norm', false ...
  , 'xcats', xcats ...
  , 'gcats', gcats ...
  , 'pcats', pcats ...
  , 'fcats', fcats ...
  , 'points_are', ternary(overlay_points, {'subject'}, {}) ...
  , 'do_save', do_save ...
  , 'y_label', 'Pupil size' ...
  , 'y_lims', [] ...
  , 'plot_subdir', plot_subdir ...
  , 'per_panel_labels', false ...
  , 'config', conf ...
);

%%  image heatmap

ba_mask = ba_mask_func( outs.labels, rowmask(outs.labels) );
ba_rois = outs.rois(ba_mask);
ba_l_image = cat_expanded( 1, cellfun(@(x) x.left_image_roi, ba_rois, 'un', 0) );
ba_r_image = cat_expanded( 1, cellfun(@(x) x.right_image_roi, ba_rois, 'un', 0) );
ba_fix = outs.image_onset_fix_events(ba_mask, :);
ba_labels = prune( outs.labels(ba_mask) );

norm_fix = [];
norm_fix_labels = fcat();

for i = 1:size(ba_fix, 1)
  l_i = ba_l_image(i, :);
  r_i = ba_r_image(i, :);
  
  if ( ~isempty(ba_fix{i, 1}) )
    l_x = ba_fix{i, 1}(:, 2);
    l_y = ba_fix{i, 1}(:, 3);
  else
    l_x = zeros( 0, 2 );
    l_y = zeros( 0, 2 );
  end
  
  if ( ~isempty(ba_fix{i, 2}) )
    r_x = ba_fix{i, 2}(:, 2);
    r_y = ba_fix{i, 2}(:, 3);
  else
    r_x = zeros( 0, 2 );
    r_y = zeros( 0, 2 );
  end
  
  fx_l = shared_utils.rect.fract_x( l_i, l_x );
  fy_l = shared_utils.rect.fract_y( l_i, l_y );
  fx_r = shared_utils.rect.fract_x( r_i, r_x );
  fy_r = shared_utils.rect.fract_y( r_i, r_y );
  
  fl = [ fx_l(:), fy_l(:) ];
  fr = [ fx_r(:), fy_r(:) ];
  
  keep_l = all( fl >= 0 & fl <= 1, 2 );
  keep_r = all( fr >= 0 & fr <= 1, 2 );
  
  fl = fl(keep_l, :);
  fr = fr(keep_r, :);
  
  left_cat = strrep( cellstr(ba_labels, 'left-image-category', i), 'left-', '' );
  right_cat = strrep( cellstr(ba_labels, 'right-image-category', i), 'right-', '' );
  
  norm_fix = [ norm_fix; fl ];
  for j = 1:size(fl, 1)
    append( norm_fix_labels, ba_labels, i );
    setcat( norm_fix_labels, 'image-category', left_cat, rows(norm_fix_labels) );
  end
  norm_fix = [ norm_fix; fr ];
  for j = 1:size(fr, 1)
    append( norm_fix_labels, ba_labels, i );
    setcat( norm_fix_labels, 'image-category', right_cat, rows(norm_fix_labels) );
  end
end

assert_ispair( norm_fix, norm_fix_labels );

%%

do_save = true;
heat_map_each = {'run-id', 'image-category', 'correct'};

[heat_maps, heat_map_labs, x_edges, y_edges] = hwwa_make_gaze_heatmap( ...
  norm_fix(:, 1), norm_fix(:, 2), norm_fix_labels, heat_map_each, [0, 1], [0, 1], 0.05, 0.05 ...
  , 'mask', ba_mask_func(norm_fix_labels, rowmask(norm_fix_labels)) ...
);

% pcats = setdiff( heat_map_each, 'run-id' );
pcats = union( pcats, {'subject'} );

pl = plotlabeled.make_spectrogram( y_edges, x_edges );
axs = pl.imagesc( heat_maps, heat_map_labs, pcats );

if ( do_save )
  shared_utils.plot.fullscreen( gcf );
  dsp3.req_savefig( gcf, hww5.plot_directory(conf, 'basic_behavior/ba_image_heatmap') ...
    , heat_map_labs, pcats );
end

function ind = remove_impossible_image_category_combinations(labels)

[image_cond_I, image_conds] = findall( labels, 'image-condition' );
cats = cellfun( @(x) strsplit(x, '-'), image_conds, 'un', 0 );

ind = [];
for i = 1:numel(image_cond_I)
  im_cats = cats{i};
  keep_cats = cellfun( @(x) sprintf('first-%s', x), im_cats, 'un', 0 );
  for j = 1:numel(keep_cats)
    ind = union( ind, find(labels, keep_cats{j}, image_cond_I{i}) );
  end
end

end

function [out_rt, out_labels, kept_ind] = make_image_onset_rt(rt, labels)

assert_ispair( rt, labels );
assert( size(rt, 2) > 1 );

[min_rt, ind] = min( rt, [], 2 );
kept_ind = [];

out_rt = [];

for i = 1:size(rt, 1)
  rt_l = rt(i, 1);
  rt_r = rt(i, 2);
  if ( ~isnan(rt_l) || ~isnan(rt_r) )
    c_ind = ind(i);
    if ( c_ind == 1 )
      % left
      im_cat = strrep( char(cellstr(labels, 'left-image-category', i)), 'left-', '' );
    else
      im_cat = strrep( char(cellstr(labels, 'right-image-category', i)), 'right-', '' );
    end    
    setcat( labels, 'image-category', im_cat, i );
    out_rt(end+1, 1) = min_rt(i);
    kept_ind(end+1, 1) = i;
  end
end

out_labels = prune( labels(kept_ind) );
assert_ispair( out_rt, out_labels );

end
